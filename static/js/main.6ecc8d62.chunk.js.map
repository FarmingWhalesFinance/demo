{"version":3,"sources":["assets/head.png","assets/tail.png","components/gameboard/Gameboard.jsx","assets/logo.png","components/nav/Navbar.jsx","components/nav/Wallet.jsx","App.js","index.js"],"names":["Gameboard","props","faces","useState","flipping","setFllipping","flippingClass","face","setFace","result","setResult","setHeads","setTails","flipCoin","rand","Math","floor","random","setTimeout","toast","success","error","className","src","headsImg","alt","onClick","tailsImg","amount","map","index","position","reverseOrder","Navbar","useWallet","publicKey","wallet","balance","setBalance","useEffect","connection","web3","Connection","clusterApiUrl","getBalance","res","toFixed","Wallet","network","WalletAdapterNetwork","Mainnet","endpoint","useMemo","wallets","getPhantomWallet","ConnectionProvider","WalletProvider","autoConnect","App","style","width","height","logoImg","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ecc8d62.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/head.5218fb8f.png\";","export default __webpack_public_path__ + \"static/media/tail.1d25f8ca.png\";","import { useState } from 'react'\nimport headsImg from '../../assets/head.png'\nimport tailsImg from '../../assets/tail.png'\nimport './Gameboard.css'\nimport toast, { Toaster } from 'react-hot-toast'\n\nconst Gameboard = (props) => {\n    const betbuttons = [\n        {\n            amount: 0.1\n        },\n        {\n            amount: 0.25\n        },\n        {\n            amount: 0.5\n        },\n        {\n            amount: 1\n        },\n    ];\n\n    const faces = ['heads', 'tails'];\n    const [flipping, setFllipping] = useState(false);\n    const flippingClass = flipping ? 'coin-img-animation' : 'coin-img'\n    const [face, setFace] = useState('heads');\n    const [result, setResult] = useState('heads');\n    const setHeads = async() => {\n        setFace('heads');\n    }\n\n    const setTails = async() => {\n        setFace('tails');\n    }\n\n    const flipCoin = async() => {\n        let rand = Math.floor(Math.random() * 2);\n        setFllipping(true);\n        \n        setTimeout(() => {\n            setFllipping(false);\n            setResult(faces[rand]);\n            if(faces[rand] == face) {\n                toast.success(\"You won.\");\n            } else {\n                toast.error(\"You lost.\");\n            }\n        }, 3000);\n        \n    }\n\n    return (\n        <div className='game-board row'>\n            <div className={'col-lg-4 col-md-12 col-sm-12 m-auto ' + face}>\n                <div>\n                    <img className=\"row head-button\" src={headsImg} alt=\"Head Image\" onClick={setHeads}/>\n                    <h4 className='text-center mt-1 mb-5'>Bull (Heads)</h4>\n                </div>\n                <div>\n                    <img className=\"tail-button row\" src={tailsImg} alt=\"Tail Image\" onClick={setTails}/>\n                    <h4 className='text-center mt-1'>Bear (Tails)</h4>\n                </div>\n            </div>\n            <div className=\"col-lg-4 col-md-12 col-sm-12 m-auto\">\n                <div className={flippingClass}>\n                    {result == 'heads' ? \n                        <img className=\"head-img\" src={headsImg} alt=\"Face Image\" /> \n                    :\n                        <img className=\"tail-img\" src={tailsImg} alt=\"Face Image\" /> \n                    }\n                    {/* <img className=\"tail-img\" src={tailImg} alt=\"Tail Image\" />\n                    <img className=\"head-img\" src={headImg} alt=\"Head Image\" /> */}\n                </div>\n            </div>\n            <div className='col-lg-4 col-md-12 col-sm-12 m-auto'>\n                <div className='flip-button' onClick={flipCoin}>\n                    FLIP\n                </div>\n                {betbuttons.map(({amount}, index) => (\n                    <div className='bet-button' key={index}>\n                       {amount}\n                    </div>\n                ))}\n            </div>\n            <Toaster position='top-center' reverseOrder={false} />\n        </div>\n      )\n  }\n  \n  export default Gameboard;","export default __webpack_public_path__ + \"static/media/logo.867211db.png\";","import { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport logoImg from '../../assets/logo.png';\nimport {\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport React, {useState, useEffect} from \"react\";\nimport './Navbar.css';\nimport {Connection, PublicKey, clusterApiUrl} from \"@solana/web3.js\";\nimport {Program, Provider, web3 } from '@project-serum/anchor';\n\nfunction Navbar() {\n  const {publicKey, wallet } = useWallet();\n  const [balance, setBalance] = useState(1);\n  useEffect(async()=>{\n    const connection = new web3.Connection(web3.clusterApiUrl('devnet'), 'confirmed');\n    if(publicKey){\n      const res =await connection.getBalance(publicKey);\n      setBalance(res/1000000000);\n    }   \n  }, [publicKey]);\n  return (   \n        <div className=\"col-12 top-nav\">       \n          <div className=\"col-sm-12 col-md-12 col-lg-12 wallet-buttons my-3\">\n            {wallet && <div className=\"balance-btn\">Balance: {balance.toFixed(2)} SOL </div>}\n            <WalletMultiButton />\n          </div>\n        </div>\n  );\n};\nexport default Navbar;\n","import { WalletAdapterNetwork, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  getPhantomWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport React, { FC, useCallback, useMemo } from \"react\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport  Navbar  from \"./Navbar\";\n// import { Notification } from \"./Notification\";\n\nexport  const Wallet = () => {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Mainnet;\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n  // Only the wallets you configure here will be compiled into your application, and only the dependencies\n  // of wallets that your users connect to will be loaded\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      \n    ],\n    [network]\n  );\n\n  // const onError = useCallback(\n  //   (error) =>\n  //     toast.custom(\n  //       <Notification\n  //         message={\n  //           error.message ? `${error.name}: ${error.message}` : error.name\n  //         }\n  //         variant=\"error\"\n  //       />\n  //     ),\n  //   []\n  // );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets}  autoConnect>\n        <WalletModalProvider>\n          <Navbar />\n        </WalletModalProvider>\n        <Toaster position=\"bottom-left\" reverseOrder={false} />\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n","import Snowfall from \"react-snowfall\";\nimport Gameboard from \"./components/gameboard/Gameboard\";\nimport logoImg from \"./assets/logo.png\";\nimport \"./App.css\";\nimport { Wallet } from \"./components/nav/Wallet\";\nfunction App() {\n  return (\n    <div>\n      <Wallet />\n      <div className=\"App\">\n        <Snowfall\n          style={{\n            // background: '#01a2ef',\n            position: \"fixed\",\n            width: \"100vw\",\n            height: \"100vh\",\n          }}\n        />\n        <div className=\"title\">\n          <img src={logoImg} alt=\"BCL Logo\" />\n          <h1>BULL OR BEAR COINFLIP</h1>\n        </div>\n        <Gameboard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}